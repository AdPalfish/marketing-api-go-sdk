/*
 * Marketing API
 *
 * Marketing API
 *
 * API version: 1.2
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package main

import (
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/antihax/optional"
	"github.com/tencentad/marketing-api-go-sdk/pkg/ads"
	"github.com/tencentad/marketing-api-go-sdk/pkg/api"
	"github.com/tencentad/marketing-api-go-sdk/pkg/config"
	"github.com/tencentad/marketing-api-go-sdk/pkg/errors"
)

type DynamicAdTemplatesGetExample struct {
	TAds                      *ads.SDKClient
	AccessToken               string
	AccountId                 int64
	ProductCatalogId          int64
	DynamicAdTemplateWidth    int64
	DynamicAdTemplateHeight   int64
	DynamicAdTemplatesGetOpts *api.DynamicAdTemplatesGetOpts
}

func (e *DynamicAdTemplatesGetExample) Init() {
	e.AccessToken = "YOUR ACCESS TOKEN"
	e.TAds = ads.Init(&config.SDKConfig{
		AccessToken: e.AccessToken,
		IsDebug:     true,
	})
	e.AccountId = int64(0)
	e.ProductCatalogId = int64(0)
	e.DynamicAdTemplateWidth = int64(1280)
	e.DynamicAdTemplateHeight = int64(720)
	e.DynamicAdTemplatesGetOpts = &api.DynamicAdTemplatesGetOpts{

		DynamicAdTemplateType:          optional.NewString(DYNAMIC_AD_IMAGE_TEMPLATE),
		DynamicAdTemplateOwnershipType: optional.NewString(PRIVATE_TEMPLATE),

		Fields: optional.NewInterface([]string{"dynamic_ad_template_id", "dynamic_ad_template_name", "dynamic_ad_template_type", "product_item_display_quantity", "dynamic_ad_template_width", "dynamic_ad_template_height", "image_url", "video_url"}),
	}
}

func (e *DynamicAdTemplatesGetExample) RunExample() (interface{}, *http.Response, error) {
	tads := e.TAds
	// change ctx as needed
	ctx := *tads.Ctx
	return tads.DynamicAdTemplates().Get(ctx, e.AccountId, e.ProductCatalogId, e.DynamicAdTemplateWidth, e.DynamicAdTemplateHeight, e.DynamicAdTemplatesGetOpts)
}

func main() {
	e := &DynamicAdTemplatesGetExample{}
	e.Init()
	response, httpResponse, err := e.RunExample()
	if err != nil {
		if resErr, ok := err.(errors.ResponseError); ok {
			errStr, _ := json.Marshal(resErr)
			fmt.Println("Response error:", string(errStr))
		} else {
			fmt.Println("Error:", err)
		}
	}
	fmt.Println("Response data:", response)
	fmt.Println("Http response:", httpResponse)
}
